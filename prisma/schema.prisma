generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

enum NotificationType {
  POST_LIKE
  POST_COMMENT
  COMMENT_REPLY
  POST_MENTION
  COMMENT_MENTION
  STORY_MENTION
  REEL_MENTION
  FOLLOW_REQUEST     
  FOLLOW_ACCEPTED    
  NEW_FOLLOWER       
  
  NEW_MESSAGE
  MESSAGE_REQUEST    

  POST_SHARE
  REEL_SHARE
  STORY_REPLY
  
  EVENT_INVITE
  EVENT_REMINDER
  
  VERIFICATION_ALERT
  ACCOUNT_WARNING
  SECURITY_ALERT
  NEW_FEATURE
  SYSTEM_UPDATE
}

model User {
  id          String   @id @default(uuid())
  username    String   @unique
  email       String   @unique
  password    String
  fullName    String?
  bio         String?
  avatarUrl   String?
  location    String?
  isPrivate   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  posts       Post[]
  comments    Comment[]
  bookmarks   Bookmark[]
  reels       Reel[]
  stories     Story[]
  mentions    Mention[]
  notifications Notification[]
  liveRooms    LiveRoom[]
  sentMessages      Message[] @relation("sent") 
  receivedMessages  Message[]  @relation("received")
  events       Event[]
  like  Like[]
  followers  UserFollow[] @relation("followers")
  following  UserFollow[] @relation("following")
  groupOnwer Group[] @relation("owner")
  groupMember GroupMember[] 

}

model UserFollow{

  follower   User   @relation("following", fields: [followerId], references: [id])
  followed   User   @relation("followers", fields: [followedId], references: [id])
  
  followerId String
  followedId String

  createdAt  DateTime @default(now())

  @@id([followerId, followedId])
}

model Post {
  id        String   @id @default(uuid())
  content   String?
  mediat    Media[]
  location  String?
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  likes     Like[]
  comments  Comment[]
  bookmarks Bookmark[]
  mentions  Mention[]
}


model Media{
  id  String @id @default(uuid())
  mediaUrl String 
  mediaType String @default("image")
  postId String
  post Post @relation(fields:[postId],references: [id])
}

model Like {
  userId String
  postId String
  user   User @relation(fields: [userId], references: [id])
  post   Post @relation(fields: [postId], references: [id])
  @@id([userId, postId])
}


model Comment {
  id         String   @id @default(uuid())
  content    String
  createdAt  DateTime @default(now())

  userId     String
  postId     String
  parentId   String? 

  user       User     @relation(fields: [userId], references: [id])
  post       Post     @relation(fields: [postId], references: [id])
  parent     Comment? @relation("CommentParent", fields: [parentId], references: [id])
  replies    Comment[] @relation("CommentParent")
}

model Bookmark {
  userId String
  postId String

  user   User @relation(fields: [userId], references: [id])
  post   Post @relation(fields: [postId], references: [id])

  @@id([userId, postId])
}

model Mention {
  id         String   @id @default(uuid())
  mentionedId String
  postId     String?
  mentioned  User     @relation(fields: [mentionedId], references: [id])
  post       Post?    @relation(fields: [postId], references: [id])
}

model Story {
  id         String   @id @default(uuid())
  mediaUrl   String
  caption    String?
  expiresAt  DateTime @default(now())
  createdAt  DateTime @default(now())

  userId     String
  user       User     @relation(fields: [userId], references: [id])
}

model Reel {
  id         String   @id @default(uuid())
  videoUrl   String
  caption    String?
  createdAt  DateTime @default(now())

  userId     String
  user       User     @relation(fields: [userId], references: [id])
}

model Notification {
  id           String   @id @default(uuid())
  type         NotificationType
  read         Boolean  @default(false)
  createdAt    DateTime @default(now())
  postId       String? 
  commentId    String?
  senderId    String?
  reiverId String
  reciverId User @relation(fields: [reiverId],references: [id])
  @@index([createdAt])
}

model LiveRoom {
  id         String   @id @default(uuid())
  title      String?
  isLive     Boolean  @default(true)
  startedAt  DateTime @default(now())
  endedAt    DateTime?
  hostId     String
  host       User     @relation(fields: [hostId], references: [id])
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
  FILE
  
}

model Message{
  id String @id @default(uuid())
  isGroup Boolean @default(false)
  type MessageType
  message String
  status String
  senderId String
  sender User @relation("sent",fields: [senderId],references: [id])
  receiverId String?
  receiver User? @relation("received",fields:[receiverId],references: [id])
  groupId String?
  group Group? @relation(fields: [groupId],references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  
}

model Group{
  id String @id @default(uuid())
  name String 
  ownerId String
  owner User @relation("owner",fields: [ownerId],references: [id])
  member GroupMember[]
  message Message[]
}

model GroupMember{
  id String @id @default(uuid())
  memberId String
  groupId String
  member User @relation(fields: [memberId],references: [id])
  group Group @relation(fields:[groupId],references: [id])
}


model Event {
  id         String   @id @default(uuid())
  title      String
  description String
  location   String?
  eventDate  DateTime
  createdAt  DateTime @default(now())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
}

